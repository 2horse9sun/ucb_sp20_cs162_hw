# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tpc_pb2 as tpc__pb2


class TwoPhaseCommitStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.TPCMsg = channel.stream_stream(
        '/rpc.TwoPhaseCommit/TPCMsg',
        request_serializer=tpc__pb2.LeaderMsg.SerializeToString,
        response_deserializer=tpc__pb2.Response.FromString,
        )


class TwoPhaseCommitServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def TPCMsg(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TwoPhaseCommitServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'TPCMsg': grpc.stream_stream_rpc_method_handler(
          servicer.TPCMsg,
          request_deserializer=tpc__pb2.LeaderMsg.FromString,
          response_serializer=tpc__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rpc.TwoPhaseCommit', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
