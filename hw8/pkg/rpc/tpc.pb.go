// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	tpc.proto

It has these top-level messages:
	LeaderMsg
	Response
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Action int32

const (
	Action_PREPARE Action = 0
	Action_ABORT   Action = 1
	Action_COMMIT  Action = 2
	Action_ACK     Action = 3
)

var Action_name = map[int32]string{
	0: "PREPARE",
	1: "ABORT",
	2: "COMMIT",
	3: "ACK",
}
var Action_value = map[string]int32{
	"PREPARE": 0,
	"ABORT":   1,
	"COMMIT":  2,
	"ACK":     3,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MessageType int32

const (
	MessageType_VOTE   MessageType = 0
	MessageType_GLOBAL MessageType = 1
)

var MessageType_name = map[int32]string{
	0: "VOTE",
	1: "GLOBAL",
}
var MessageType_value = map[string]int32{
	"VOTE":   0,
	"GLOBAL": 1,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LeaderMsg struct {
	Type   MessageType `protobuf:"varint,1,opt,name=type,enum=rpc.MessageType" json:"type,omitempty"`
	Action Action      `protobuf:"varint,2,opt,name=action,enum=rpc.Action" json:"action,omitempty"`
	Key    string      `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value  string      `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *LeaderMsg) Reset()                    { *m = LeaderMsg{} }
func (m *LeaderMsg) String() string            { return proto.CompactTextString(m) }
func (*LeaderMsg) ProtoMessage()               {}
func (*LeaderMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LeaderMsg) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_VOTE
}

func (m *LeaderMsg) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_PREPARE
}

func (m *LeaderMsg) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LeaderMsg) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Response struct {
	Action Action `protobuf:"varint,1,opt,name=action,enum=rpc.Action" json:"action,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_PREPARE
}

func init() {
	proto.RegisterType((*LeaderMsg)(nil), "rpc.LeaderMsg")
	proto.RegisterType((*Response)(nil), "rpc.Response")
	proto.RegisterEnum("rpc.Action", Action_name, Action_value)
	proto.RegisterEnum("rpc.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TwoPhaseCommit service

type TwoPhaseCommitClient interface {
	TPCMsg(ctx context.Context, opts ...grpc.CallOption) (TwoPhaseCommit_TPCMsgClient, error)
}

type twoPhaseCommitClient struct {
	cc *grpc.ClientConn
}

func NewTwoPhaseCommitClient(cc *grpc.ClientConn) TwoPhaseCommitClient {
	return &twoPhaseCommitClient{cc}
}

func (c *twoPhaseCommitClient) TPCMsg(ctx context.Context, opts ...grpc.CallOption) (TwoPhaseCommit_TPCMsgClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TwoPhaseCommit_serviceDesc.Streams[0], c.cc, "/rpc.TwoPhaseCommit/TPCMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoPhaseCommitTPCMsgClient{stream}
	return x, nil
}

type TwoPhaseCommit_TPCMsgClient interface {
	Send(*LeaderMsg) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type twoPhaseCommitTPCMsgClient struct {
	grpc.ClientStream
}

func (x *twoPhaseCommitTPCMsgClient) Send(m *LeaderMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twoPhaseCommitTPCMsgClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TwoPhaseCommit service

type TwoPhaseCommitServer interface {
	TPCMsg(TwoPhaseCommit_TPCMsgServer) error
}

func RegisterTwoPhaseCommitServer(s *grpc.Server, srv TwoPhaseCommitServer) {
	s.RegisterService(&_TwoPhaseCommit_serviceDesc, srv)
}

func _TwoPhaseCommit_TPCMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwoPhaseCommitServer).TPCMsg(&twoPhaseCommitTPCMsgServer{stream})
}

type TwoPhaseCommit_TPCMsgServer interface {
	Send(*Response) error
	Recv() (*LeaderMsg, error)
	grpc.ServerStream
}

type twoPhaseCommitTPCMsgServer struct {
	grpc.ServerStream
}

func (x *twoPhaseCommitTPCMsgServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twoPhaseCommitTPCMsgServer) Recv() (*LeaderMsg, error) {
	m := new(LeaderMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TwoPhaseCommit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TwoPhaseCommit",
	HandlerType: (*TwoPhaseCommitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TPCMsg",
			Handler:       _TwoPhaseCommit_TPCMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tpc.proto",
}

func init() { proto.RegisterFile("tpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0xcf, 0x4b, 0xc3, 0x30,
	0x18, 0x35, 0x6b, 0x97, 0xad, 0x5f, 0xb1, 0x84, 0x0f, 0x0f, 0xc5, 0xd3, 0xd8, 0x3c, 0x94, 0x09,
	0x55, 0x26, 0x1e, 0x3d, 0x74, 0x65, 0x88, 0xd8, 0xd2, 0x12, 0x82, 0xf7, 0x5a, 0xc3, 0x1c, 0xba,
	0x25, 0x34, 0x55, 0xe9, 0xc5, 0xbf, 0x5d, 0x9a, 0xa9, 0xec, 0xb2, 0x5b, 0xde, 0x8f, 0x3c, 0xde,
	0xf7, 0xc0, 0x6b, 0x75, 0x1d, 0xeb, 0x46, 0xb5, 0x0a, 0x9d, 0x46, 0xd7, 0xd3, 0x6f, 0xf0, 0x32,
	0x59, 0xbd, 0xc8, 0x26, 0x37, 0x6b, 0xbc, 0x00, 0xb7, 0xed, 0xb4, 0x0c, 0xc9, 0x84, 0x44, 0xc1,
	0x82, 0xc5, 0x8d, 0xae, 0xe3, 0x5c, 0x1a, 0x53, 0xad, 0xa5, 0xe8, 0xb4, 0xe4, 0x56, 0xc5, 0x19,
	0xd0, 0xaa, 0x6e, 0x37, 0x6a, 0x17, 0x0e, 0xac, 0xcf, 0xb7, 0xbe, 0xc4, 0x52, 0xfc, 0x57, 0x42,
	0x06, 0xce, 0x9b, 0xec, 0x42, 0x67, 0x42, 0x22, 0x8f, 0xf7, 0x4f, 0x3c, 0x83, 0xe1, 0x67, 0xf5,
	0xfe, 0x21, 0x43, 0xd7, 0x72, 0x7b, 0x30, 0xbd, 0x82, 0x31, 0x97, 0x46, 0xab, 0x9d, 0x39, 0x0c,
	0x26, 0x47, 0x83, 0xe7, 0xb7, 0x40, 0xf7, 0x0c, 0xfa, 0x30, 0x2a, 0xf9, 0xaa, 0x4c, 0xf8, 0x8a,
	0x9d, 0xa0, 0x07, 0xc3, 0x64, 0x59, 0x70, 0xc1, 0x08, 0x02, 0xd0, 0xb4, 0xc8, 0xf3, 0x07, 0xc1,
	0x06, 0x38, 0x02, 0x27, 0x49, 0x1f, 0x99, 0x33, 0x9f, 0x81, 0x7f, 0x70, 0x09, 0x8e, 0xc1, 0x7d,
	0x2a, 0x44, 0xff, 0x11, 0x80, 0xde, 0x67, 0xc5, 0x32, 0xc9, 0x18, 0x59, 0xdc, 0x41, 0x20, 0xbe,
	0x54, 0xf9, 0x5a, 0x19, 0x99, 0xaa, 0xed, 0x76, 0xd3, 0xe2, 0x25, 0x50, 0x51, 0xa6, 0xfd, 0x36,
	0x81, 0x2d, 0xf3, 0xbf, 0xd5, 0xf9, 0xa9, 0xc5, 0x7f, 0xdd, 0x23, 0x72, 0x4d, 0x9e, 0xa9, 0xdd,
	0xf5, 0xe6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x78, 0x8b, 0x4f, 0x64, 0x01, 0x00, 0x00,
}
